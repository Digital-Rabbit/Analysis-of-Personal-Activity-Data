source('~/DataScienceCourses/ProgAssignments/pollutantmean.R')
source('~/DataScienceCourses/ProgAssignments/pollutantmean.R')
source('~/.active-rstudio-document')
pollutantmean(pollutant="n")
source('~/.active-rstudio-document')
pollutantmean(pollutant="n")
pollutantmean(pollutant="s", id=1:10)
pollutantmean(pollutant="n",id=70:72)
pollutantmean(pollutant="n",id=23)
pollutantmean(pollutant="n",id=70)
pollutantmean(pollutant="n",id=71)
pollutantmean(pollutant="n",id=72)
mean(0.2551667,1.431601,2.363205)
x <- mean(0.2551667,1.431601,2.363205)
x
y <- (0.2551667,1.431601,2.363205)
y <- 1 2 3
y <- (1 2 3)
y <- (1, 2, 3)
y <- c(0.2551667,1.431601,2.363205)
y
mean(y)
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
f <- function(x) {
+     g <- function(y) {
+         y + z
+     }
+     z <- 4
+     x + g(x)
+ }
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x<-5
y <- if(x < 3) {
NA
} else {
10
}
y
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
h(2,3,4L)
h(2)
a = c(1)
a
a = c(a,2)
a
mean(a)
a = c(0,2,3)
a
b = c(7,8,9,11)
a = c(a,b)
a
length(a)
mean(a)
myVector <- 0
myVector
myVector <-c(2,3,4,5)
myVector
source('~/.active-rstudio-document')
pollutantmean(pollutant="s")
pollutantmean(pollutant="s",1:10)
pollutantmean(pollutant="s",id=1:10)
pollutantmean(pollutant="n",id=70:72)
pollutantmean(pollutant="n",23)
pollutantmean(pollutant="n",id=23)
myVector
source('~/DataScienceCourses/ProgAssignments/pollutantmean.R')
pollutantmean("/Users/bunny/DataScienceCourses/ProgAssignments/specdata/","sulfate",1:10)
pollutantmean("/Users/bunny/DataScienceCourses/ProgAssignments/specdata/","nitrate",23
)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("/Users/bunny/DataScienceCourses/ProgAssignments/specdata/", "nitrate", 70:72)
source('~/.active-rstudio-document')
if mean(NaN)
source('~/.active-rstudio-document')
pollutantmean("/Users/bunny/DataScienceCourses/ProgAssignments/specdata/", "nitrate", 70:72)
source('~/.active-rstudio-document')
pollutantmean("/Users/bunny/DataScienceCourses/ProgAssignments/specdata/", "nitrate", 70:72)
source('~/DataScienceCourses/ProgAssignments/pollutantmean.R')
[1
]
pollutantmean("/Users/bunny/DataScienceCourses/ProgAssignments/specdata/", "nitrate", 70:72)
pollutantmean("/Users/bunny/DataScienceCourses/ProgAssignments/specdata/", "nitrate", 70:72)
source('~/DataScienceCourses/ProgAssignments/pollutantmean.R')
pollutantmean("/Users/bunny/DataScienceCourses/ProgAssignments/specdata/", "nitrate", 70:72)
source('~/.active-rstudio-document')
pollutantmean("/Users/bunny/DataScienceCourses/ProgAssignments/specdata/", "nitrate", 70:72)
source('~/.active-rstudio-document')
pollutantmean("/Users/bunny/DataScienceCourses/ProgAssignments/specdata/", "nitrate", 70:72)
pollutantmean("/Users/bunny/DataScienceCourses/ProgAssignments/specdata/", "sulfate", 1:10)
pollutantmean("/Users/bunny/DataScienceCourses/ProgAssignments/specdata/", "nitrate", 23)
source('~/DataScienceCourses/ProgAssignments/complete.R')
complete()
source('~/DataScienceCourses/ProgAssignments/complete.R')
complete()
source('~/DataScienceCourses/ProgAssignments/complete.R')
complete()
source('~/DataScienceCourses/ProgAssignments/complete.R')
complete()
source('~/DataScienceCourses/ProgAssignments/complete.R')
complete()
source('~/DataScienceCourses/ProgAssignments/complete.R')
source('~/DataScienceCourses/ProgAssignments/complete.R')
source('~/DataScienceCourses/ProgAssignments/complete.R')
complete()
complete()
source('~/.active-rstudio-document')
complete()
source('~/DataScienceCourses/ProgAssignments/complete.R')
complete()
source('~/DataScienceCourses/ProgAssignments/complete.R')
complete()
source('~/DataScienceCourses/ProgAssignments/complete.R')
complete(id=1)
source('~/DataScienceCourses/ProgAssignments/complete.R')
source('~/DataScienceCourses/ProgAssignments/complete.R')
source('~/DataScienceCourses/ProgAssignments/complete.R')
complete(id=1)
complete(id=c(2,4,8,10,12))
complete(id=30:25)
complete(id=3)
library(xlsx)
gasData <- read.xlsx("./data/gas.xlsx",sheetIndex=1,header=TRUE)
head(gasData)
dat <- read.xlsx("./data/gas.xlsx,sheetIndex=1,colIndex=7:15,rowIndex=18:23")
dat <- read.xlsx("./data/gas.xlsx",sheetIndex=1,colIndex=7:15,rowIndex=18:23)
dat
sum(dat$Zip*dat$Ext,na.rm=T)
fileURL = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
library(XML)
install.packages("XML")
library(XML)
doc <- xmlTreeParse(fileURL,useInternal=TRUE)
fileURL
download.file(fileURL,destfile="./data/restaurants.xml",method="curl")
doc <- xmlTreeParse("./data/restaurants.xml",useInternal=TRUE)
rootNode <- xmlRoot(doc)
names(rootNode)
rootNode[[1]]
xpathSApply(rootNode,"//zipcode",xmlValue)
zips = xpathSApply(rootNode,"//zipcode",xmlValue)
zips
theZip <- zips = 21231
zips = 21231
zips
zips <- xpathSApply(rootNode,"//zipcode",xmlValue)
theZip <- zips == 21231
theZip
sum(theZip)
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(fileURL,destfile="./data/idahoHousing.csv",method="curl")
DT <- read.csv("./data/idahoHousing.csv")
install.packages("data.table")
library(data.table)
help data.table
help("data.table")
DT <- data.table("./data/idahoHousing.csv")
class(DT)
head(DT,3)
head(DT,10)
head(DT)
DT
DT <-fread("./data/idahoHousing.csv")
head(DT,3)
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
DT[,mean(pwgtp15),by=SEX]
sapply(split(DT$pwgtp15,DT$SEX),mean)
mean(DT$pwgtp15,by=DT$SEX)
tapply(DT$pwgtp15,DT$SEX,mean)
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(mean(DT$pwgtp15,by=DT$SEX))
mean(DT$pwgtp15,by=DT$SEX)
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(mean(DT[DT$SEX==1,]$pwgtp15))
system.time(rowMeans(DT)[DT$SEX==1])
install.packages("RMySQL")
library(RMySQL)
ucscDb <- dbConnect(MySQL(),user="genome",host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb,"show databases;")
deDisconnect(ucscDb)
dbDisconnect(ucscDb)
result
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
created = h5createFile("example.h5")
created
created = h5createGroup("example.h5","foo")
created = h5createGroup("example.h5","baa")
created = h5createGroup("example.h5","foo/foobaa")
h5ls("example.h5")
library(httr)
install.packages("httpuv")
library(httpuv)
myapp = oauth_app("github",key="ab26fe5f2482d7bcc57b",secret="d3857650d1ca564c03e2aa62636d3dc0e20cc2b9")
sig = sign_oauth1.0(myapp,token="ab26fe5f2482d7bcc57b",token_secret="d3857650d1ca564c03e2aa62636d3dc0e20cc2b9")
homeTL = GET("https://api.github.com/users/jtleek/repos",sig)
homeTL
oauth_endpoints("github")
myapp <- oauth_app("github","d3857650d1ca564c03e2aa62636d3dc0e20cc2b9")
myapp <- oauth_app("gitbug")
myapp <- oauth_app("github")
options(gsubfn.engine = "R")
require(sqldf)
acs
acs <- read.csv("./data/acsData.csv")
sqldf("select * from acs")
sqldf("select * from acs where AGEP < 50 and pwgtp1")
sqldf("select pwgtp1 from acs where AGEP < 50")
unique(acs$AGEP)
con <- url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode <- readLines(con)
close(con)
htmlCode
htmlCode[2]
htmlCode[45]
head(htmlCode)
nchar(htmlCode[45])
nchar(htmlCode[c(10,20,30,100)])
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
download.file(fileURL,destFile="./data/wksst8110.for",method="curl")
download.file(fileURL,destFile = "./data/wksst8110", method = "curl")
fileURL
myData <- read.table("./data/wksst8110.for")
myData <- read.fdf("./data/wksst8110.for", widths = c(9,8,8,8,8))
myData <- read.fwf("./data/wksst8110.for", widths = c(9,8,8,8,8))
myData
head(myData)
myData2 <- read.fdf("./data/wksst8110.for", widths = c(9,8,8,8,8),skip=4)
myData2 <- read.fwf("./data/wksst8110.for", widths = c(9,8,8,8,8),skip=4)
head(myData2)
myData2 <- read.fwf("./data/wksst8110.for", widths = c(9,8,8,8,8),sep = "\t,skip=4)
""
myData2 <- read.fwf("./data/wksst8110.for", widths = c(9,8,8,8,8),sep = "\t",skip=4)
head(myData2)
myData2 <- read.fwf("./data/wksst8110.for", widths = c(10,8,8,8,8),sep = "\t",skip=4)
head(myData2)
myData2 <- read.fwf("./data/wksst8110.for", widths = c(10,5,8,5,8,5,8,5,8),skip=4)
head(myData2)
head(myData2[,7])
sum(myData2[,7])
mean(myData2[,7])
length(myData2[,7])
myData2 <- read.fwf("./data/wksst8110.for", widths = c(10,5,4,4,5,4,4,5,4,4,5,8),sep="-",skip=4)
myData2 <- read.fwf("./data/wksst8110.for", widths = c(10,4,4,4,4,4,4,4,4),sep="-",skip=4)
myData2 <- read.fwf("./data/wksst8110.for", widths = c(10,8,8,8,8),sep="-",skip=4)
myData2 <- read.fwf("./data/wksst8110.for", widths = c(10,5,8,5,8,5,8,5,8),skip=4)
fileURL <= "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
fileULR
filrURL
fileURL
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
fileURL
getwd
getwd()
download.file(fileURL,destfile="./data/housing.csv",method="curl")
housingData <- read.csv("./data/housing.csv")
head(housingData,3)
agricultureLogical <- housingData[ (housingData $ACR == 3 & housingData $AGC = 6),]
agricultureLogical <- usingData[ (housingData$ACR == 3 & housingData$AGC = 6),]
agricultureLogical <- housingData[ (housingData$ACR == 3 & housingData$AGC = 6),]
agricultureLogical <- housingData[housingData$ACR,]
agricultureLogical
agricultureLogical <- housingData[(housingData$ACR = 3 & housingData$AGC = 6),]
agricultureLogical <- housingData[ (housingData$ACR == 3 & housingData$AGC == 6),]
agricultureLogical
which( agricultureLogical)
which(agricultureLogical)
agricultureLogical <- which(housingData[ (housingData$ACR = 3 & housingData$AGC = 6),])
agricultureLogical <- housingData[ (housingData$ACR= = 3 & housingData$AGC == 6)]
agricultureLogical <- housingData[ (housingData$ACR==3 & housingData$AGC==6)]
which(agricultureLogical)
agricultureLogical
test <- housingData[,ACR]
housingData[,ACR]
housingData(head)
head(housingData)
housingData[,"ACR"]
housingData[,(housingData$ACR==3)]
agricultureLogical <- housingData[(housingData$ACR > 2 & housingData$AGC > 5),]
which(agricultureLogical)
agricultureLogical
housingData[(housingData$ACR > 2),]
housingData[1,]
housingData[5,1:5]
housingData[,"SERIALNO"==835]
housingData[,housingData$SERIALNO > 800]
housingData[,(housingData$SERIALNO > 800)]
housingData[,"SERIALNO"]
housingData[housingData$SERIALNO > 1357000,]
subsetData <- housingData[housingData$ACR == 3,]
subsetData
subsetData <- housingData[housingData$ACR == 3 & housingData$AGC == 6,]
subsetData
logicalVector <- housingData(subsetData)
logicalVector<- housingData[subsetData]
subsetData[1:3,]
ans <- subsetData(!is.na)
ans <- subsetData[!is.na,]
temp <- logical(housingData[ (housingData$ACR == 3 & housingData$AGC == 6),])
which(with(housingData, ACR == 3 & AGC == 6))
which(with(housingData, housingData$ACR == 3 & housingData&AGC == 6))
which(with(housingData, housingData$ACR == 3)
)
which(with(housingData, housingData$ACR == 3 & housingData$AGS == 6))
imageURL <= "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
imageURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
downloadFile(imageULR,destFile="./data/jeff.jpg",method="curl")
download.file(imageURL,destFile="./data/jeff.jpg",method="curl")
download.file(imageURL,destfile="./data/jeff.jpg",method="curl")
install.packages("rimage")
imageData <- readJpeg("./data/jeff.jpg")
imageData <- readlines("./data/jeff.jpg")
imageData <- read.lines("./data/jeff.jpg")
imageData <- readLines("./data/jeff.jpg")
install.packages("jpeg")
imageData <- readJPEG("./data/jeff.jpg")
readJPEG
readJPEG()
help(jpeg)
library("jpeg", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
imageData <- readJPEG("./data/jeff.jpg")
imageData
head(imageData)
summary(imageData)
quantile(imageData)
library("jpeg", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
fileURL1 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
fileURL2 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(fileURL1,destfile="./data/FGDP.csv",method="curl")
gdpData <- read.csv("./data/FGDP.csv")
download.file(fileURL2,destfile="./data/FEDSTATS_Country.csv",method="curl")
fedstats_countryData <- read.csv("./data/FEDSTATS_Country.csv")
head(gdpData)
head(fedstats_countryData)
gdpData[,1]
names(gdpData)
names(fedstats_countryData)
mergedData = merge(gdpData,fedstats_countryData,by.x="X",by.y="CountryCode",all=TRUE)
head(mergedData)
mergedData
reultinData <- !is.na(mergedData)
resultingData <- !is.na(mergedData)
resultingData
theCountries <- mergedData[resultingData,]
theCountries
head(theCountries)
theCountries
resultingData
ok <- resultingData
abcd <- mergedData[ok,]
abcd
install.packages("Hmisc")
library("Hmisc", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
imageData
quantiles(imageData)
quantile(imageData)
theCountries
sort(theCountries$var1,na.last=TRUE)
sort(theCountries,na.last=TRUE)
head(gdpData)
library(plyr)
arrange(dgpData,Forss.domesticProduct.2012)
arrange(gdpData,Gross.domestic.produce.2012)
arrange(gdpData,Gross.domestic.product.2012)
arrangedData <- arrange(gdpData,Gross.domestic.product.2012)
sort(arrangedData)
arrangedData
head(fedstats_countData,3)
View(fedstats_countryData)
View(gdpData)
View(mergedData)
View(mergedData)
View(gdpData)
cleandGNP <- gdpData[,gdpData$Ranking>0]
View(cleandGNP)
View(gdpData)
head(gdpData)
read.csv("./data/FGDP.csv",skip=4)
cleanData <- read.csv("./data/FGDP.csv",skip=4,nrows=190)
cleanData
gdpRanking <- cleanData[,1:2]
gdpRanking
View(gdpRanking)
View(fedstats_countryData)
summary(fedstats_countryData)
View(fedstats_countryData)
summary(jeff.jpg)
summary("./data/jeff.jpg")
summary(imageData)
str(imageData)
str(fedstats_countryData)
quantile(imageData,na.rm=TRUE)
quantile(imageData,probs=c(0.5,0.75,0.9))
quantile(imagedata,probs=c(.30,.80))
quantile(imageData,probs=c(.30,.80))
jeffData <- readJPEG("./data/jeff.jpg",native=TRUE)
head(jeffData)
quantile(jeffData,probs=c(.30,.80))
object.size(jeffData)
object.size(cleanData)
View(gdpData)
View(gdpRanking)
View(fedstats_countryData)
incomeData <- fedstats_countryData[,1:3]
incomeData
View(gdpData)
View(gdpRanking)
colnames(gdpRanking)
gdpRanking <- rename(gdpRanking,replace=c("X" = "CountryCode", "X.1" = "Ranking"))
View(gdpRanking)
View(fedstats_countryData)
View(incomeData)
head(mtcars)
carMelt <- melt(mtcars,id=c("carname","gear","cyl"),measure.vars("hp","mpg"))
library(reshape2)
carMelt <- melt(mtcars,id=c("carname","gear","cyl"),measure.vars("hp","mpg"))
carMelt <- melt(mtcars,id=c("carname","gear","cyl"),value.names("hp","mpg"))
carMelt <- melt(mtcars,id=c("carname","gear","cyl"),measure.vars=c("hp","mpg"))
head(InsectSprays)
head(incomeData)
head(gdpRanking)
mergedData <- merge(gdpRanking,incomeData)
head(mergedData)
View(mergedData)
tail(mergedData)
sort(mergedData,mergedData$Ranking)
sortedData <- sort(mergedData$Ranking,decreasing=FALSE)
sortedData
sort(mergedData)
arrange(mergedData,asc(Ranking))
arrange(mergedData, Ranking)
mergedDta
View(mergedData)
reorderedData <- arrange(mergedData,Ranking)
View(reorderedData)
View(mergedData)
tail(mergedData)
myTable = table(mergedData$Ranking,mergedData$Income.Group)
myTable
summarize(myTable)
sum(myTable[,"High income: OECD"])
ave(myTable[,"High income: OECD"])
ave(myTable)
mean(myTable[,"High income: OECD"])
sum(myTable[,"High income: OECD"])
a <= is.na(myTable[,"High income: OECD"])
a <- is.na(myTable[,"High income: OECD"])
a
View(reorderedData)
View(reorderedData)
highestGDP <- cut(reorderedData,breaks=seq(0:4,by=0.2),include.lowest=TRUE)
mergedData$RankingGroups <- cut2(mergedData$Ranking,g=5)
table(mergedData$RankingGroups)
mergedData$IncomeStuff <- cut2(mergedData$Income.Group)
View(resultingData)
myData$Try <- cut2(reorderedData$Income.Group,g=5)
mean(as.numeric(reorderedData[,2]))
mean(reorderedData[,2])
mean(reorderedData[,4 by="Income.Group"])
mean(reorderedData[,4])
mean(as.numeric(reorderedData[,4])
)
tapply(reorderedData$Income.Group, reorderedData$Ranking, mean)
tapply(reorderedData$Ranking, reorderedData$Income.Group, mean)
myMean <-tapply(reorderedData$Ranking, reorderedData$Income.Group, mean)
myMean
mergedData2 <- merge(gdpData,incomeData,by.x=“X”,by.y=CountryCode)
mergedData2 <- merge(gdpData,incomeData,by.x=“X”,by.y="CountryCode")
mergedData2 <- merge(gdpData,incomeData,by.x="X",by.y="CountryCode")
View(mergedData2)
tail(mergedData2)
setwd("~/Desktop/Reproducible Research/Project 1/RepData_PeerAssessment1")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
qplot(dayOfWeek,data=cleanAct, geom="bar", weight=steps,
ylab = "Steps",xlab="Day of Week")
library("plyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
